[gd_scene load_steps=8 format=3 uid="uid://btulmb2ym37kv"]

[ext_resource type="Script" path="res://Scripts/UI/MainMenu.cs" id="1_6mms6"]
[ext_resource type="Shader" path="res://Shaders/3DPerspective.gdshader" id="2_8h4hj"]
[ext_resource type="Texture2D" uid="uid://dips1s5sqpqtl" path="res://icon.svg" id="3_5tu8y"]
[ext_resource type="PackedScene" uid="uid://b8ofhhcplb4qx" path="res://Constructs/node_2d.tscn" id="5_ud03w"]
[ext_resource type="PackedScene" uid="uid://cs1dh2iryd1cl" path="res://Constructs/CardConstruct.tscn" id="5_ycfta"]

[sub_resource type="GDScript" id="GDScript_p4en6"]
script/source = "extends Button

@export var angle_x_max: float = 15.0
@export var angle_y_max: float = 15.0
@export var max_offset_shadow: float = 50.0

@export_category(\"Oscillator\")
@export var spring: float = 150.0
@export var damp: float = 10.0
@export var velocity_multiplier: float = 2.0

var displacement: float = 0.0 
var oscillator_velocity: float = 0.0

var tween_rot: Tween
var tween_hover: Tween
var tween_destroy: Tween
var tween_handle: Tween

var last_mouse_pos: Vector2
var mouse_velocity: Vector2
var following_mouse: bool = false
var last_pos: Vector2
var velocity: Vector2

@onready var card_texture: TextureRect = $CardTexture
@onready var shadow = $Shadow
@onready var collision_shape = $DestroyArea/CollisionShape2D

func _ready() -> void:
	# Convert to radians because lerp_angle is using that
	angle_x_max = deg_to_rad(angle_x_max)
	angle_y_max = deg_to_rad(angle_y_max)
	collision_shape.set_deferred(\"disabled\", true)

func _process(delta: float) -> void:
	rotate_velocity(delta)
	follow_mouse(delta)
	handle_shadow(delta)
	
func destroy() -> void:
	card_texture.use_parent_material = true
	if tween_destroy and tween_destroy.is_running():
		tween_destroy.kill()
	tween_destroy = create_tween().set_ease(Tween.EASE_IN_OUT).set_trans(Tween.TRANS_CUBIC)
	tween_destroy.tween_property(material, \"shader_parameter/dissolve_value\", 0.0, 2.0).from(1.0)
	tween_destroy.parallel().tween_property(shadow, \"self_modulate:a\", 0.0, 1.0)

func rotate_velocity(delta: float) -> void:
	if not following_mouse: return
	var center_pos: Vector2 = global_position - (size/2.0)
	print(\"Pos: \", center_pos)
	print(\"Pos: \", last_pos)
	# Compute the velocity
	velocity = (position - last_pos) / delta
	last_pos = position
	
	print(\"Velocity: \", velocity)
	oscillator_velocity += velocity.normalized().x * velocity_multiplier
	
	# Oscillator stuff
	var force = -spring * displacement - damp * oscillator_velocity
	oscillator_velocity += force * delta
	displacement += oscillator_velocity * delta
	
	rotation = displacement

func handle_shadow(delta: float) -> void:
	# Y position is enver changed.
	# Only x changes depending on how far we are from the center of the screen
	var center: Vector2 = get_viewport_rect().size / 2.0
	var distance: float = global_position.x - center.x
	
	shadow.position.x = lerp(0.0, -sign(distance) * max_offset_shadow, abs(distance/(center.x)))

func follow_mouse(delta: float) -> void:
	if not following_mouse: return
	var mouse_pos: Vector2 = get_global_mouse_position()
	global_position = mouse_pos - (size/2.0)

func handle_mouse_click(event: InputEvent) -> void:
	if not event is InputEventMouseButton: return
	if event.button_index != MOUSE_BUTTON_LEFT: return
	
	if event.is_pressed():
		following_mouse = true
	else:
		# drop card
		following_mouse = false
		collision_shape.set_deferred(\"disabled\", false)
		if tween_handle and tween_handle.is_running():
			tween_handle.kill()
		tween_handle = create_tween().set_ease(Tween.EASE_IN_OUT).set_trans(Tween.TRANS_CUBIC)
		tween_handle.tween_property(self, \"rotation\", 0.0, 0.3)

func _on_gui_input(event: InputEvent) -> void:
	
	handle_mouse_click(event)
	
	# Don't compute rotation when moving the card
	if following_mouse: return
	if not event is InputEventMouseMotion: return
	
	# Handles rotation
	# Get local mouse pos
	var mouse_pos: Vector2 = get_local_mouse_position()
	#print(\"Mouse: \", mouse_pos)
	#print(\"Card: \", position + size)
	var diff: Vector2 = (position + size) - mouse_pos

	var lerp_val_x: float = remap(mouse_pos.x, 0.0, size.x, 0, 1)
	var lerp_val_y: float = remap(mouse_pos.y, 0.0, size.y, 0, 1)
	#print(\"Lerp val x: \", lerp_val_x)
	#print(\"lerp val y: \", lerp_val_y)

	var rot_x: float = rad_to_deg(lerp_angle(-angle_x_max, angle_x_max, lerp_val_x))
	var rot_y: float = rad_to_deg(lerp_angle(angle_y_max, -angle_y_max, lerp_val_y))
	#print(\"Rot x: \", rot_x)
	#print(\"Rot y: \", rot_y)
	
	card_texture.material.set_shader_parameter(\"x_rot\", rot_y)
	card_texture.material.set_shader_parameter(\"y_rot\", rot_x)

func _on_mouse_entered() -> void:
	if tween_hover and tween_hover.is_running():
		tween_hover.kill()
	tween_hover = create_tween().set_ease(Tween.EASE_OUT).set_trans(Tween.TRANS_ELASTIC)
	tween_hover.tween_property(self, \"scale\", Vector2(1.2, 1.2), 0.5)

func _on_mouse_exited() -> void:
	# Reset rotation
	if tween_rot and tween_rot.is_running():
		tween_rot.kill()
	tween_rot = create_tween().set_ease(Tween.EASE_OUT).set_trans(Tween.TRANS_BACK).set_parallel(true)
	tween_rot.tween_property(card_texture.material, \"shader_parameter/x_rot\", 0.0, 0.5)
	tween_rot.tween_property(card_texture.material, \"shader_parameter/y_rot\", 0.0, 0.5)
	
	# Reset scale
	if tween_hover and tween_hover.is_running():
		tween_hover.kill()
	tween_hover = create_tween().set_ease(Tween.EASE_OUT).set_trans(Tween.TRANS_ELASTIC)
	tween_hover.tween_property(self, \"scale\", Vector2.ONE, 0.55)
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_xdqxy"]
shader = ExtResource("2_8h4hj")
shader_parameter/fov = 90.0
shader_parameter/cull_back = true
shader_parameter/y_rot = 0.0
shader_parameter/x_rot = 0.0
shader_parameter/inset = 0.0

[node name="MainMenu" type="Control" node_paths=PackedStringArray("newButton", "continueButton", "optionsButton", "quitButton")]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = ExtResource("1_6mms6")
newButton = NodePath("MarginContainer/VBoxContainer/New Game")
continueButton = NodePath("MarginContainer/VBoxContainer/Continue")
optionsButton = NodePath("MarginContainer/VBoxContainer/Options")
quitButton = NodePath("MarginContainer/VBoxContainer/Quit")

[node name="MarginContainer" type="MarginContainer" parent="."]
layout_mode = 1
anchors_preset = 2
anchor_top = 1.0
anchor_bottom = 1.0
offset_top = -101.0
offset_right = 70.0
grow_vertical = 0
theme_override_constants/margin_left = 20
theme_override_constants/margin_bottom = 20

[node name="VBoxContainer" type="VBoxContainer" parent="MarginContainer"]
layout_mode = 2
size_flags_horizontal = 0

[node name="New Game" type="Button" parent="MarginContainer/VBoxContainer"]
layout_mode = 2
text = "New Game
"

[node name="Continue" type="Button" parent="MarginContainer/VBoxContainer"]
layout_mode = 2
text = "Continue"

[node name="Options" type="Button" parent="MarginContainer/VBoxContainer"]
layout_mode = 2
text = "Options"

[node name="Quit" type="Button" parent="MarginContainer/VBoxContainer"]
layout_mode = 2
text = "Quit"

[node name="Button" type="Button" parent="."]
layout_mode = 0
offset_right = 626.0
offset_bottom = 389.0
script = SubResource("GDScript_p4en6")

[node name="CardTexture" type="TextureRect" parent="Button"]
material = SubResource("ShaderMaterial_xdqxy")
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
texture = ExtResource("3_5tu8y")

[node name="Shadow" type="TextureRect" parent="Button"]
visible = false
material = SubResource("ShaderMaterial_xdqxy")
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
texture = ExtResource("3_5tu8y")

[node name="CardConstruct" parent="." instance=ExtResource("5_ycfta")]
position = Vector2(713, 487)

[node name="Node2D" parent="." instance=ExtResource("5_ud03w")]
position = Vector2(957, 283)

[connection signal="pressed" from="MarginContainer/VBoxContainer/New Game" to="." method="OnNewPressed"]
[connection signal="pressed" from="MarginContainer/VBoxContainer/Continue" to="." method="OnContinuePressed"]
[connection signal="pressed" from="MarginContainer/VBoxContainer/Options" to="." method="OnOptionsPressed"]
[connection signal="pressed" from="MarginContainer/VBoxContainer/Quit" to="." method="OnQuitPressed"]
[connection signal="gui_input" from="Button" to="Button" method="_on_gui_input"]
